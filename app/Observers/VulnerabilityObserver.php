<?php

namespace App\Observers;

use App\Models\Vulnerability;

class VulnerabilityObserver
{
    /**
     * Handle the Vulnerability "creating" event.
     *
     * @param  \App\Models\Vulnerability  $vulnerability
     * @return void
     */
    public function creating(Vulnerability $vulnerability)
    {
        if($vulnerability->rank)
        {
            if(Vulnerability::whereRank($vulnerability->rank)->exists())
            {
                Vulnerability::where('rank', '>=', $vulnerability->rank)->increment('rank');
            }
        }
        else
        {
            $lowest_vulnerability = Vulnerability::orderByDesc('rank')->first();

            $vulnerability->rank = $lowest_vulnerability ? ++$lowest_vulnerability->rank : Vulnerability::FIRST_RANK;
        }
    }

    /**
     * Handle the Vulnerability "updating" event.
     *
     * @param  \App\Models\Vulnerability  $vulnerability
     * @return void
     */
    public function updating(Vulnerability $vulnerability)
    {
        $old_rank = $vulnerability->getOriginal()['rank'];

        if(!$vulnerability->rank)
        {
            $lowest_vulnerability = Vulnerability::where('id', '!=', $vulnerability->id)->orderByDesc('rank')->first();

            $vulnerability->rank = $lowest_vulnerability ? ++$lowest_vulnerability->rank : Vulnerability::FIRST_RANK;
        }
        elseif($vulnerability->rank < $old_rank)
        {
            Vulnerability::whereBetween('rank', [$vulnerability->rank, $old_rank])->increment('rank');
        }
        elseif($vulnerability->rank > $old_rank)
        {
            Vulnerability::whereBetween('rank', [$old_rank, $vulnerability->rank])->decrement('rank');
        }
    }

    /**
     * Handle the Vulnerability "deleting" event.
     *
     * @param  \App\Models\Vulnerability  $vulnerability
     * @return void
     */
    public function deleting(Vulnerability $vulnerability)
    {
        $vulnerability->where('rank', '>', $vulnerability->rank)->decrement('rank');
    }
}
